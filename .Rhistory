group_by(cropType) %>%
mutate(YJ_yield = car::yjPower(yield,
lambda = powerTransform(yield, family = "yjPower")$lambda))
cat("\nNormality check for:", crop, "\n")
crop_types
crop_types <- unique(data.modDF$cropType)
crop_types
normality.plots2 <- list()
crop
crop="MILHO"
cat("\nNormality check for:", crop, "\n")
crop_data <-  data.modDF.tr %>% filter(cropType == crop) %>% select(YJ_yield)
crop_data <- as.double(crop_data$YJ_yield)
adTest <- ad.test(x = crop_data)
crop_data <- as.data.frame(crop_data)
colnames(crop_data) <- "YJ_yield"
ggplot(crop_data, aes(x = YJ_yield)) +
geom_histogram(bins = 10, fill = 'blue', alpha = 0.7) +
ggtitle(paste("Histogram of Yield for", crop,
"\n",
"\nAnderson-Darling Normality Test: ",
"P-Value = ", format(adTest$p.value, digits = 3, scientific = TRUE),
";   A² = ", format(adTest$statistic, digits = 4))) +
# "\nKolmogorov-Smirnov Test = ", ksTest$p.value)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
adTest$p.value
adTest$statistic
data.modDF.tr <- data.modDF %>%
group_by(cropType) %>%
mutate(YJ_yield = log(yield))
cat("\nNormality check for:", crop, "\n")
crop_data <-  data.modDF.tr %>% filter(cropType == crop) %>% select(YJ_yield)
crop_data <- as.double(crop_data$YJ_yield)
adTest <- ad.test(x = crop_data)
## Kolmogorov-Smirnov Test
#  ksTest <- ks.test(x = crop_data, y = "pnorm")
crop_data <- as.data.frame(crop_data)
colnames(crop_data) <- "YJ_yield"
adTest
data.modDF.tr <- data.modDF %>%
group_by(cropType) %>%
mutate(YJ_yield = MASS::boxcox(yield ~ 1)$x)
data.modDF.tr <- data.modDF %>%
group_by(cropType) %>%
mutate(lambda = boxcox(yield ~ 1, plotit = FALSE)$x[which.max(boxcox(yield ~ 1,
plotit = FALSE)$y)],
YJ_yield = (yield^lambda - 1) / lambda )
cat("\nNormality check for:", crop, "\n")
crop_data <-  data.modDF.tr %>% filter(cropType == crop) %>% select(YJ_yield)
crop_data <- as.double(crop_data$YJ_yield)
adTest <- ad.test(x = crop_data)
adTest
crop_data <- as.data.frame(crop_data)
colnames(crop_data) <- "YJ_yield"
ggplot(crop_data, aes(x = YJ_yield)) +
geom_histogram(bins = 10, fill = 'blue', alpha = 0.7) +
ggtitle(paste("Histogram of Yield for", crop,
"\n",
"\nAnderson-Darling Normality Test: ",
"P-Value = ", format(adTest$p.value, digits = 3, scientific = TRUE),
";   A² = ", format(adTest$statistic, digits = 4))) +
# "\nKolmogorov-Smirnov Test = ", ksTest$p.value)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(crop_data, aes(sample = YJ_yield)) +
stat_qq() +
stat_qq_line() +
ggtitle(paste("Q-Q Plot of Yield for", crop,
"\n",
"\nAnderson-Darling Normality Test: ",
"P-Value = ", format(adTest$p.value, digits = 3, scientific = TRUE),
";   A² = ", format(adTest$statistic, digits = 4))) +
# "\nKolmogorov-Smirnov Test = ", ksTest$p.value)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#!/usr/bin/Rscript
##################################################################################################
rm(list=ls())
library(openxlsx)
library(GGally)
library(lme4)
library(olsrr)
library(broom.mixed)
library(lattice)
library(MuMIn)
library(car)
library(lmerTest)
library(MASS)
library(dplyr)
library(ggeffects)
library(caret)
library(DHARMa)
library(performance)
library(ggpubr)
library(nortest)
###################################################################################################
rootDir <- "/home/robel/Talisman/"
data.dF <- read.xlsx(paste0(rootDir, "dataOUT/yieldWeather_seasInd_Nov2May.xlsx"))
###################################################################################################
## ***** pre-processing (getting the data into shape)
data.dF$RainPETr <-  data.dF$Rain/data.dF$PET
data.modDF2 <- data.dF
data.modDF2 <-  data.modDF2[!data.modDF2$cropType %in%
c("ALGODAO", "CHA FOLHA", "PAPRICA", "MANDIOCA",
"TABACO", "GERGELIM", "TRIGO", "GENGIBRE",
"BATATA DOCE POLPA BRANCA", "BATATA DOCE ALARANJADA",
"ALL BATATA", "GIRASSOL"), ]
## ***** Grouping crop type
# cropTypes.df <- data.frame(CropType =  unique(data.modDF2$crop_type),
#                            CropGroup = c("Legumes", "Cerials", "Legumes", "Cerials",
#                                          "Others", "Others", "Legumes", "Legumes",
#                                          "Others", "Legumes", "Legumes", "Cerials",
#                                          "Others", "Legumes", "Cerials", "Legumes", "Legumes"))
cropTypes.df <- data.frame(CropType =  unique(data.modDF2$cropType),
CropGroup = c("Legumes", "Cerials", "Legumes", "Cerials",
"Legumes", "Legumes", "Legumes", "Legumes",
"Legumes", "Cerials", "Legumes", "Cerials",
"Legumes"))
data.modDF2$CropGroup <- NA
for (crp in  seq_along(cropTypes.df$CropType)) {
data.modDF2[data.modDF2$cropType %in% cropTypes.df$CropType[crp], ]$CropGroup <-
cropTypes.df$CropGroup[crp]
}
## *** trimming the yield values
data.modDF2$yield <- as.double(data.modDF2$yield)
data.modDF2$yield[data.modDF2$yield < 10 ] <- NA
data.modDF2$yield[data.modDF2$yield > 30000 ] <- NA
for (crp in seq_along(unique(data.modDF2$cropType))) {
cr.tr <- quantile(data.modDF2[data.modDF2$cropType %in% crp, ]$yield, c(0.05, 0.95),
na.rm = TRUE)
data.modDF2[data.modDF2$cropType %in%
crp, ]$yield[data.modDF2[data.modDF2$cropType %in%
crp, ]$yield <  cr.tr[[1]]] <- NA
data.modDF2[data.modDF2$cropType %in%
crp, ]$yield[data.modDF2[data.modDF2$cropType %in%
crp, ]$yield >  cr.tr[[2]]] <- NA
}
data.modDF <- data.modDF2[!is.na(data.modDF2$yield), ]
data.modDF.tr <- data.modDF %>%
group_by(cropType) %>%
mutate(YJ_yield = car::yjPower(yield,
lambda = powerTransform(yield, family = "yjPower")$lambda))
# data.modDF.tr <- data.modDF %>%
#                   group_by(cropType) %>%
#                   mutate(YJ_yield = log(yield))
# data.modDF.tr <- data.modDF %>%
#   group_by(cropType) %>%
#   mutate(lambda = boxcox(yield ~ 1, plotit = FALSE)$x[which.max(boxcox(yield ~ 1,
#                                                                        plotit = FALSE)$y)],
#     YJ_yield = (yield^lambda - 1) / lambda )
## >>>>>>
View(data.modDF.tr)
ggpairs(data.modDF.tr[,c(6, 10:22, 24)],
aes(color =  CropGroup,
alpha = 0.5),
upper = list(continuous = wrap("cor", size = 4)),
lower = list(continuous = "smooth",
wrap(ggally_points, size = 0.001))) +
theme(strip.text = element_text(size = 12))
data.modDF.tr
ggpairs(data.modDF.tr[,c(6, 10:24)],
aes(color =  CropGroup,
alpha = 0.5),
upper = list(continuous = wrap("cor", size = 4)),
lower = list(continuous = "smooth",
wrap(ggally_points, size = 0.001))) +
theme(strip.text = element_text(size = 12))
png(paste0(rootDir, "Plots/pairs_cropGroup.png"),
height = 10, width = 14, units = "in",
bg = "white", pointsize = 12, res = 300)
ggpairs(data.modDF.tr[,c(6, 10:24)],
aes(color =  CropGroup,
alpha = 0.5),
upper = list(continuous = wrap("cor", size = 4)),
lower = list(continuous = "smooth",
wrap(ggally_points, size = 0.001))) +
theme(strip.text = element_text(size = 12))
dev.off()
png(paste0(rootDir, "Plots/pairs_cropGroup.png"),
height = 12, width = 16, units = "in",
bg = "white", pointsize = 12, res = 300)
ggpairs(data.modDF.tr[,c(6, 10:24)],
aes(color =  CropGroup,
alpha = 0.5),
upper = list(continuous = wrap("cor", size = 4)),
lower = list(continuous = "smooth",
wrap(ggally_points, size = 0.001))) +
theme(strip.text = element_text(size = 12))
dev.off()
png(paste0(rootDir, "Plots/pairs_cropGroup.png"),
height = 15, width = 18, units = "in",
bg = "white", pointsize = 12, res = 300)
ggpairs(data.modDF.tr[,c(6, 10:24)],
aes(color =  CropGroup,
alpha = 0.5),
upper = list(continuous = wrap("cor", size = 4)),
lower = list(continuous = "smooth",
wrap(ggally_points, size = 0.001))) +
theme(strip.text = element_text(size = 12))
dev.off()
rm(list=ls())
#!/usr/local/bin/Rscript
###################################################################################################
rm(list = ls())
library(openxlsx)
library(ncdf4)
library(rgdal)
library(raster)
library(terra)
library(exactextractr)
library(rworldxtra)
library(maptools)
library(rgeos)
library(cleangeo)
library(stringr)
library(tictoc)
library(dplyr)
library(lubridate)
library(snow)
library(doParallel)
library(doMC)
library(climdex.pcic)
library(zoo)
install.packages("climdex.pcic")
install.packages("~/Documents/tools/rPackages/climdex.pcic-1.1-9.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/tools/rPackages/climdex.pcic-1.1-9.tar.gz", repos = NULL, type = "source",)
install.packages("~/Documents/tools/rPackages/climdex.pcic-1.1-9.tar.gz", repos = NULL, type = "source", dependencies = TRUE, build_vignette = TRUE)
library(climate4R.climdex)
library(climate4R.indices)
library(climate4R.value)
library(climatol)
devtools::install_github("pacificclimate/climdex.pcic", dependencies = TRUE, type = "source", build_vignettes = TRUE, build_manual = TRUE)
library(climdex.pcic)
rm(list=ls())
library(openxlsx)
library(GGally)
library(lme4)
library(olsrr)
library(broom.mixed)
library(lattice)
library(MuMIn)
library(car)
library(lmerTest)
library(MASS)
library(dplyr)
library(ggeffects)
library(caret)
library(DHARMa)
library(performance)
library(ggpubr)
library(nortest)
###################################################################################################
rootDir <- "/home/robel/Talisman/"
data.dF <- read.xlsx(paste0(rootDir, "dataOUT/yieldWeather_seasInd_Nov2May.xlsx"))
###################################################################################################
## ***** pre-processing (getting the data into shape)
data.dF$RainPETr <-  data.dF$Rain/data.dF$PET
data.modDF2 <- data.dF
## ***** dealing with extremes (unrealistic value)
## *** Removing Cotton/ALGODAO; Tea/CHA FOLHA; PAPRICA; TABACO;  GERGELIM; TRIGO; GENGIBRE; MANDIOCA
# data.modDF2 <-  data.modDF2[!data.modDF2$crop_type %in%
#                             c("ALGODAO", "CHA FOLHA", "PAPRICA", "MANDIOCA",
#                               "TABACO", "GERGELIM", "TRIGO", "GENGIBRE"), ]
data.modDF2 <-  data.modDF2[!data.modDF2$cropType %in%
c("ALGODAO", "CHA FOLHA", "PAPRICA", "MANDIOCA",
"TABACO", "GERGELIM", "TRIGO", "GENGIBRE",
"BATATA DOCE POLPA BRANCA", "BATATA DOCE ALARANJADA",
"ALL BATATA", "GIRASSOL"), ]
## ***** Grouping crop type
# cropTypes.df <- data.frame(CropType =  unique(data.modDF2$crop_type),
#                            CropGroup = c("Legumes", "Cerials", "Legumes", "Cerials",
#                                          "Others", "Others", "Legumes", "Legumes",
#                                          "Others", "Legumes", "Legumes", "Cerials",
#                                          "Others", "Legumes", "Cerials", "Legumes", "Legumes"))
cropTypes.df <- data.frame(CropType =  unique(data.modDF2$cropType),
CropGroup = c("Legumes", "Cerials", "Legumes", "Cerials",
"Legumes", "Legumes", "Legumes", "Legumes",
"Legumes", "Cerials", "Legumes", "Cerials",
"Legumes"))
data.modDF2$CropGroup <- NA
for (crp in  seq_along(cropTypes.df$CropType)) {
data.modDF2[data.modDF2$cropType %in% cropTypes.df$CropType[crp], ]$CropGroup <-
cropTypes.df$CropGroup[crp]
}
## *** trimming the yield values
data.modDF2$yield <- as.double(data.modDF2$yield)
data.modDF2$yield[data.modDF2$yield <= 0 ] <- NA
data.modDF <- data.modDF2[!is.na(data.modDF2$yield), ]
View(data.dF)
#!/usr/bin/Rscript
##################################################################################################
rm(list=ls())
library(openxlsx)
library(GGally)
library(lme4)
library(olsrr)
library(broom.mixed)
library(lattice)
library(MuMIn)
library(car)
library(lmerTest)
library(MASS)
library(dplyr)
library(ggeffects)
library(caret)
library(DHARMa)
library(performance)
library(ggpubr)
library(nortest)
###################################################################################################
rootDir <- "/home/robel/Talisman/"
data.dF <- read.xlsx(paste0(rootDir, "dataOUT/yieldWeather_seasInd_Nov2May.xlsx"))
###################################################################################################
## ***** pre-processing (getting the data into shape)
data.dF$RainPETr <-  data.dF$Rain/data.dF$PET
data.modDF2 <- data.dF
## ***** dealing with extremes (unrealistic value)
## *** Removing Cotton/ALGODAO; Tea/CHA FOLHA; PAPRICA; TABACO;  GERGELIM; TRIGO; GENGIBRE; MANDIOCA
# data.modDF2 <-  data.modDF2[!data.modDF2$crop_type %in%
#                             c("ALGODAO", "CHA FOLHA", "PAPRICA", "MANDIOCA",
#                               "TABACO", "GERGELIM", "TRIGO", "GENGIBRE"), ]
data.modDF2 <-  data.modDF2[!data.modDF2$cropType %in%
c("ALGODAO", "CHA FOLHA", "PAPRICA", "MANDIOCA",
"TABACO", "GERGELIM", "TRIGO", "GENGIBRE",
"BATATA DOCE POLPA BRANCA", "BATATA DOCE ALARANJADA",
"ALL BATATA", "GIRASSOL"), ]
## ***** Grouping crop type
# cropTypes.df <- data.frame(CropType =  unique(data.modDF2$crop_type),
#                            CropGroup = c("Legumes", "Cerials", "Legumes", "Cerials",
#                                          "Others", "Others", "Legumes", "Legumes",
#                                          "Others", "Legumes", "Legumes", "Cerials",
#                                          "Others", "Legumes", "Cerials", "Legumes", "Legumes"))
cropTypes.df <- data.frame(CropType =  unique(data.modDF2$cropType),
CropGroup = c("Legumes", "Cerials", "Legumes", "Cerials",
"Legumes", "Legumes", "Legumes", "Legumes",
"Legumes", "Cerials", "Legumes", "Cerials",
"Legumes"))
data.modDF2$CropGroup <- NA
for (crp in  seq_along(cropTypes.df$CropType)) {
data.modDF2[data.modDF2$cropType %in% cropTypes.df$CropType[crp], ]$CropGroup <-
cropTypes.df$CropGroup[crp]
}
data.modDF2$yield <- as.double(data.modDF2$yield)
data.modDF2$yield[data.modDF2$yield <= 0 ] <- NA
data.modDF <- data.modDF2[!is.na(data.modDF2$yield), ]
View(data.modDF)
png(paste0(rootDir, "Plots/pairs_cropGroup.png"),
height = 16, width = 20, units = "in",
bg = "white", pointsize = 12, res = 300)
ggpairs(data.modDF[,c(6, 10:23)],
aes(color =  CropGroup,
alpha = 0.5),
upper = list(continuous = wrap("cor", size = 3)),
lower = list(continuous = "smooth",
wrap(ggally_points, size = 0.001))) +
theme(strip.text = element_text(size = 10))
dev.off()
install.packages("~/gitProj/AquaBEHER_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::install_github("RobelTakele/AquaBEHERgui", dependencies = TRUE, type = "source", build_vignettes = TRUE, build_manual = TRUE)
install.packages("~/Documents/tools/rPackages/leaflet.multiopacity-0.1.1.tar.gz", repos = NULL, type = "source")
devtools::install_github("RobelTakele/AquaBEHERgui", dependencies = TRUE, type = "source", build_vignettes = TRUE, build_manual = TRUE)
AquaBEHERgui::run_app()
rm(list = ls())
styler:::style_active_file()
data$Elev
AquaBEHERgui::run_app()
###############################################################################
rm(list = ls())
###############################################################################
# setwd("/home/robel/ropensci/gitRepo/")
setwd("/home/robel/ropensci/gitRepo/AquaBEHERsp/")
usethis::use_package("AquaBEHER", type = "Imports")
setwd("~/ropensci/gitRepo")
pkgKitten::kitten(name = pkgName,
path = ".",
author = "Robel Takele",
maintainer = "Robel Takele",
email = "takelerobel@gmail.com",
license = "GPL (>= 3)",
puppy = TRUE,    # ***** tinytest::puppy
bunny = TRUE)
pkgName <- "AquaBEHERsp"
# available::available("AquaBEHERsp", browse = FALSE)
## ***** Create empity Rstudio project ----
pkgKitten::kitten(name = pkgName,
path = ".",
author = "Robel Takele",
maintainer = "Robel Takele",
email = "takelerobel@gmail.com",
license = "GPL (>= 3)",
puppy = TRUE,    # ***** tinytest::puppy
bunny = TRUE)
setwd("/home/robel/ropensci/gitRepo/AquaBEHERsp/")
usethis::use_package("AquaBEHER", type = "Imports")
usethis::use_package("terra", type = "Imports")
usethis::use_package("ncdf4", type = "Imports")
usethis::use_package("progress", type = "Imports")
usethis::use_r("calcPETsp.R")
usethis::use_test("calcPETsp")
devtools::load_all()
devtools::document()
?calcPETsp
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
usethis::use_namespace(roxygen = TRUE)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
?calcPETsp
devtools::load_all()
devtools::document()
?calcPETsp
devtools::load_all()
devtools::document()
?calcPETsp
devtools::check()
tools::showNonASCIIfile("R/calcPETsp.R")
devtools::load_all()
devtools::document()
?calcPETsp
devtools::check()
devtools::build_manual()
urlchecker::url_check()
spelling::spell_check_package()
styler::style_pkg()
lintr::lint_package()
DateStart <- "2016-01-01"
DateEnd <- "2022-12-31"
domExtent <- c(xmin = 31.95, xmax = 34.05, ymin = -14.05, ymax = -11.95)
Res = 0.0833
method = "PM"
outDir.PET <- "/home/robel/ropensci/gitRepo/dataOUT"
outFile.prefix.PET <- "Test"
FileElevation <- "/home/robel/ropensci/gitRepo/SampleData/SRTMv4_5min_MOZ.tif"
ncFileTmax <- "/home/robel/ropensci/gitRepo/SampleData/tmax_test_2001T2022.nc"
ncFileTmin <- "/home/robel/ropensci/gitRepo/SampleData/tmin_test_2001T2022.nc"
ncFileSRAD <- "/home/robel/ropensci/gitRepo/SampleData/srad_test_2001T2022.nc"
ncFileTdew <- "/home/robel/ropensci/gitRepo/SampleData/Tdew_test_2001T2022.nc"
ncFileU10 <- "/home/robel/ropensci/gitRepo/SampleData/U10_test_2001T2022.nc"
PET.nc <- calcPETsp(DateStart, DateEnd, domExtent, Res,
method, outDir.PET, outFile.prefix.PET,
FileElevation, ncFileTmax, ncFileTmin,
ncFileSRAD,
ncFileTdew,
ncFileU10)
rm(list = ls())
###############################################################################
# setwd("/home/robel/ropensci/gitRepo/")
setwd("/home/robel/ropensci/gitRepo/AquaBEHERsp/")
devtools::load_all()
autotest::autotest_package()
gpABsp <- goodpractice::gp()
gpABsp
gpABsp <- goodpractice::gp()
gpABsp
rcmdcheck::rcmdcheck()
rm(list = ls())
setwd("/home/robel/gitProj/AquaBEHER/")
pkgdown::build_site()
devtools::document()
devtools::build_manual()
devtools::build_readme()
devtools::build_vignettes()
pkgdown::build_site()
devtools::document()
pkgload::dev_help('AgroClimateData')
devtools::build_manual()
devtools::build_readme()
devtools::build_vignettes()
pkgdown::build_site()
devtools::document()
devtools::build_manual()
devtools::build_readme()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_news()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_site( )
pkgdown::preview_site()
pkgdown::build_site( )
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_github_action("pkgdown")
pkgdown::check_pkgdown()
pkgdown::metadata
pkgdown::check_pkgdown()
pkgdown::build_site( )
pkgdown::pkgdown_sitrep()
pkgdown::preview_site()
usethis::use_github_action("pkgdown")
setwd("/home/robel/gitProj/AquaBEHER/")
usethis::use_github_action("pkgdown")
pkgdown::build_search()
pkgdown::build_favicons(overwrite = TRUE)
pkgdown::build_home()
pkgdown::build_site( )
pkgdown::preview_site()
pkgdown::pkgdown_sitrep()
pkgdown::check_pkgdown()
usethis::edit_r_environ()
